# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OtherModelGeneralInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source': 'str',
        'identifier': 'str',
        'author': 'list[Contact]',
        'creator': 'list[Contact]',
        'creation_date': 'date',
        'modification_date': 'list[date]',
        'rights': 'str',
        'availability': 'str',
        'url': 'str',
        'format': 'str',
        'reference': 'list[Reference]',
        'language': 'str',
        'software': 'str',
        'language_written_in': 'str',
        'model_category': 'ModelCategory',
        'status': 'str',
        'objective': 'str',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'identifier': 'identifier',
        'author': 'author',
        'creator': 'creator',
        'creation_date': 'creationDate',
        'modification_date': 'modificationDate',
        'rights': 'rights',
        'availability': 'availability',
        'url': 'url',
        'format': 'format',
        'reference': 'reference',
        'language': 'language',
        'software': 'software',
        'language_written_in': 'languageWrittenIn',
        'model_category': 'modelCategory',
        'status': 'status',
        'objective': 'objective',
        'description': 'description'
    }

    def __init__(self, name=None, source=None, identifier=None, author=None, creator=None, creation_date=None, modification_date=None, rights=None, availability=None, url=None, format=None, reference=None, language=None, software=None, language_written_in=None, model_category=None, status=None, objective=None, description=None):  # noqa: E501
        """OtherModelGeneralInformation - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._source = None
        self._identifier = None
        self._author = None
        self._creator = None
        self._creation_date = None
        self._modification_date = None
        self._rights = None
        self._availability = None
        self._url = None
        self._format = None
        self._reference = None
        self._language = None
        self._software = None
        self._language_written_in = None
        self._model_category = None
        self._status = None
        self._objective = None
        self._description = None
        self.discriminator = None
        self.name = name
        if source is not None:
            self.source = source
        self.identifier = identifier
        if author is not None:
            self.author = author
        if creator is not None:
            self.creator = creator
        self.creation_date = creation_date
        if modification_date is not None:
            self.modification_date = modification_date
        self.rights = rights
        if availability is not None:
            self.availability = availability
        if url is not None:
            self.url = url
        if format is not None:
            self.format = format
        self.reference = reference
        if language is not None:
            self.language = language
        if software is not None:
            self.software = software
        self.language_written_in = language_written_in
        if model_category is not None:
            self.model_category = model_category
        if status is not None:
            self.status = status
        if objective is not None:
            self.objective = objective
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this OtherModelGeneralInformation.  # noqa: E501


        :return: The name of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OtherModelGeneralInformation.


        :param name: The name of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this OtherModelGeneralInformation.  # noqa: E501


        :return: The source of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OtherModelGeneralInformation.


        :param source: The source of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def identifier(self):
        """Gets the identifier of this OtherModelGeneralInformation.  # noqa: E501


        :return: The identifier of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this OtherModelGeneralInformation.


        :param identifier: The identifier of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def author(self):
        """Gets the author of this OtherModelGeneralInformation.  # noqa: E501


        :return: The author of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this OtherModelGeneralInformation.


        :param author: The author of this OtherModelGeneralInformation.  # noqa: E501
        :type: list[Contact]
        """

        self._author = author

    @property
    def creator(self):
        """Gets the creator of this OtherModelGeneralInformation.  # noqa: E501


        :return: The creator of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this OtherModelGeneralInformation.


        :param creator: The creator of this OtherModelGeneralInformation.  # noqa: E501
        :type: list[Contact]
        """

        self._creator = creator

    @property
    def creation_date(self):
        """Gets the creation_date of this OtherModelGeneralInformation.  # noqa: E501


        :return: The creation_date of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OtherModelGeneralInformation.


        :param creation_date: The creation_date of this OtherModelGeneralInformation.  # noqa: E501
        :type: date
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def modification_date(self):
        """Gets the modification_date of this OtherModelGeneralInformation.  # noqa: E501


        :return: The modification_date of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: list[date]
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this OtherModelGeneralInformation.


        :param modification_date: The modification_date of this OtherModelGeneralInformation.  # noqa: E501
        :type: list[date]
        """

        self._modification_date = modification_date

    @property
    def rights(self):
        """Gets the rights of this OtherModelGeneralInformation.  # noqa: E501


        :return: The rights of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this OtherModelGeneralInformation.


        :param rights: The rights of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """
        if rights is None:
            raise ValueError("Invalid value for `rights`, must not be `None`")  # noqa: E501

        self._rights = rights

    @property
    def availability(self):
        """Gets the availability of this OtherModelGeneralInformation.  # noqa: E501


        :return: The availability of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this OtherModelGeneralInformation.


        :param availability: The availability of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._availability = availability

    @property
    def url(self):
        """Gets the url of this OtherModelGeneralInformation.  # noqa: E501


        :return: The url of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OtherModelGeneralInformation.


        :param url: The url of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def format(self):
        """Gets the format of this OtherModelGeneralInformation.  # noqa: E501


        :return: The format of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this OtherModelGeneralInformation.


        :param format: The format of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def reference(self):
        """Gets the reference of this OtherModelGeneralInformation.  # noqa: E501


        :return: The reference of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OtherModelGeneralInformation.


        :param reference: The reference of this OtherModelGeneralInformation.  # noqa: E501
        :type: list[Reference]
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def language(self):
        """Gets the language of this OtherModelGeneralInformation.  # noqa: E501


        :return: The language of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this OtherModelGeneralInformation.


        :param language: The language of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def software(self):
        """Gets the software of this OtherModelGeneralInformation.  # noqa: E501


        :return: The software of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this OtherModelGeneralInformation.


        :param software: The software of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._software = software

    @property
    def language_written_in(self):
        """Gets the language_written_in of this OtherModelGeneralInformation.  # noqa: E501


        :return: The language_written_in of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._language_written_in

    @language_written_in.setter
    def language_written_in(self, language_written_in):
        """Sets the language_written_in of this OtherModelGeneralInformation.


        :param language_written_in: The language_written_in of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """
        if language_written_in is None:
            raise ValueError("Invalid value for `language_written_in`, must not be `None`")  # noqa: E501

        self._language_written_in = language_written_in

    @property
    def model_category(self):
        """Gets the model_category of this OtherModelGeneralInformation.  # noqa: E501


        :return: The model_category of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: ModelCategory
        """
        return self._model_category

    @model_category.setter
    def model_category(self, model_category):
        """Sets the model_category of this OtherModelGeneralInformation.


        :param model_category: The model_category of this OtherModelGeneralInformation.  # noqa: E501
        :type: ModelCategory
        """

        self._model_category = model_category

    @property
    def status(self):
        """Gets the status of this OtherModelGeneralInformation.  # noqa: E501


        :return: The status of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OtherModelGeneralInformation.


        :param status: The status of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def objective(self):
        """Gets the objective of this OtherModelGeneralInformation.  # noqa: E501


        :return: The objective of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this OtherModelGeneralInformation.


        :param objective: The objective of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def description(self):
        """Gets the description of this OtherModelGeneralInformation.  # noqa: E501


        :return: The description of this OtherModelGeneralInformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OtherModelGeneralInformation.


        :param description: The description of this OtherModelGeneralInformation.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OtherModelGeneralInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtherModelGeneralInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
