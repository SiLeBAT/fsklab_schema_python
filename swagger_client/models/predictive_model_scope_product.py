# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictiveModelScopeProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'unit': 'str',
        'method': 'list[str]',
        'packaging': 'list[str]',
        'treatment': 'list[str]',
        'origin_country': 'str',
        'origin_area': 'str',
        'fisheries_area': 'str',
        'production_date': 'date',
        'expiry_date': 'date'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'unit': 'unit',
        'method': 'method',
        'packaging': 'packaging',
        'treatment': 'treatment',
        'origin_country': 'originCountry',
        'origin_area': 'originArea',
        'fisheries_area': 'fisheriesArea',
        'production_date': 'productionDate',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, name=None, description=None, unit=None, method=None, packaging=None, treatment=None, origin_country=None, origin_area=None, fisheries_area=None, production_date=None, expiry_date=None):  # noqa: E501
        """PredictiveModelScopeProduct - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._unit = None
        self._method = None
        self._packaging = None
        self._treatment = None
        self._origin_country = None
        self._origin_area = None
        self._fisheries_area = None
        self._production_date = None
        self._expiry_date = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.unit = unit
        if method is not None:
            self.method = method
        if packaging is not None:
            self.packaging = packaging
        if treatment is not None:
            self.treatment = treatment
        if origin_country is not None:
            self.origin_country = origin_country
        if origin_area is not None:
            self.origin_area = origin_area
        if fisheries_area is not None:
            self.fisheries_area = fisheries_area
        if production_date is not None:
            self.production_date = production_date
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def name(self):
        """Gets the name of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The name of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PredictiveModelScopeProduct.


        :param name: The name of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The description of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PredictiveModelScopeProduct.


        :param description: The description of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unit(self):
        """Gets the unit of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The unit of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PredictiveModelScopeProduct.


        :param unit: The unit of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def method(self):
        """Gets the method of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The method of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PredictiveModelScopeProduct.


        :param method: The method of this PredictiveModelScopeProduct.  # noqa: E501
        :type: list[str]
        """

        self._method = method

    @property
    def packaging(self):
        """Gets the packaging of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The packaging of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this PredictiveModelScopeProduct.


        :param packaging: The packaging of this PredictiveModelScopeProduct.  # noqa: E501
        :type: list[str]
        """

        self._packaging = packaging

    @property
    def treatment(self):
        """Gets the treatment of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The treatment of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._treatment

    @treatment.setter
    def treatment(self, treatment):
        """Sets the treatment of this PredictiveModelScopeProduct.


        :param treatment: The treatment of this PredictiveModelScopeProduct.  # noqa: E501
        :type: list[str]
        """

        self._treatment = treatment

    @property
    def origin_country(self):
        """Gets the origin_country of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The origin_country of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this PredictiveModelScopeProduct.


        :param origin_country: The origin_country of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """

        self._origin_country = origin_country

    @property
    def origin_area(self):
        """Gets the origin_area of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The origin_area of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._origin_area

    @origin_area.setter
    def origin_area(self, origin_area):
        """Sets the origin_area of this PredictiveModelScopeProduct.


        :param origin_area: The origin_area of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """

        self._origin_area = origin_area

    @property
    def fisheries_area(self):
        """Gets the fisheries_area of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The fisheries_area of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: str
        """
        return self._fisheries_area

    @fisheries_area.setter
    def fisheries_area(self, fisheries_area):
        """Sets the fisheries_area of this PredictiveModelScopeProduct.


        :param fisheries_area: The fisheries_area of this PredictiveModelScopeProduct.  # noqa: E501
        :type: str
        """

        self._fisheries_area = fisheries_area

    @property
    def production_date(self):
        """Gets the production_date of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The production_date of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: date
        """
        return self._production_date

    @production_date.setter
    def production_date(self, production_date):
        """Sets the production_date of this PredictiveModelScopeProduct.


        :param production_date: The production_date of this PredictiveModelScopeProduct.  # noqa: E501
        :type: date
        """

        self._production_date = production_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PredictiveModelScopeProduct.  # noqa: E501


        :return: The expiry_date of this PredictiveModelScopeProduct.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PredictiveModelScopeProduct.


        :param expiry_date: The expiry_date of this PredictiveModelScopeProduct.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictiveModelScopeProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictiveModelScopeProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
