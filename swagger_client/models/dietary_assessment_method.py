# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DietaryAssessmentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_tool': 'str',
        'number_of_non_consecutive_one_day': 'str',
        'software_tool': 'str',
        'number_of_food_items': 'list[str]',
        'record_types': 'list[str]',
        'food_descriptors': 'list[str]'
    }

    attribute_map = {
        'collection_tool': 'collectionTool',
        'number_of_non_consecutive_one_day': 'numberOfNonConsecutiveOneDay',
        'software_tool': 'softwareTool',
        'number_of_food_items': 'numberOfFoodItems',
        'record_types': 'recordTypes',
        'food_descriptors': 'foodDescriptors'
    }

    def __init__(self, collection_tool=None, number_of_non_consecutive_one_day=None, software_tool=None, number_of_food_items=None, record_types=None, food_descriptors=None):  # noqa: E501
        """DietaryAssessmentMethod - a model defined in Swagger"""  # noqa: E501
        self._collection_tool = None
        self._number_of_non_consecutive_one_day = None
        self._software_tool = None
        self._number_of_food_items = None
        self._record_types = None
        self._food_descriptors = None
        self.discriminator = None
        self.collection_tool = collection_tool
        self.number_of_non_consecutive_one_day = number_of_non_consecutive_one_day
        if software_tool is not None:
            self.software_tool = software_tool
        self.number_of_food_items = number_of_food_items
        self.record_types = record_types
        self.food_descriptors = food_descriptors

    @property
    def collection_tool(self):
        """Gets the collection_tool of this DietaryAssessmentMethod.  # noqa: E501

        Food diaries, interview, 24-hour recall interview, food propensy questionnaire, portion size measurement aids, eating outside questionnaire  # noqa: E501

        :return: The collection_tool of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._collection_tool

    @collection_tool.setter
    def collection_tool(self, collection_tool):
        """Sets the collection_tool of this DietaryAssessmentMethod.

        Food diaries, interview, 24-hour recall interview, food propensy questionnaire, portion size measurement aids, eating outside questionnaire  # noqa: E501

        :param collection_tool: The collection_tool of this DietaryAssessmentMethod.  # noqa: E501
        :type: str
        """
        if collection_tool is None:
            raise ValueError("Invalid value for `collection_tool`, must not be `None`")  # noqa: E501

        self._collection_tool = collection_tool

    @property
    def number_of_non_consecutive_one_day(self):
        """Gets the number_of_non_consecutive_one_day of this DietaryAssessmentMethod.  # noqa: E501

        Number of non-consecutive one-day recorded  # noqa: E501

        :return: The number_of_non_consecutive_one_day of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._number_of_non_consecutive_one_day

    @number_of_non_consecutive_one_day.setter
    def number_of_non_consecutive_one_day(self, number_of_non_consecutive_one_day):
        """Sets the number_of_non_consecutive_one_day of this DietaryAssessmentMethod.

        Number of non-consecutive one-day recorded  # noqa: E501

        :param number_of_non_consecutive_one_day: The number_of_non_consecutive_one_day of this DietaryAssessmentMethod.  # noqa: E501
        :type: str
        """
        if number_of_non_consecutive_one_day is None:
            raise ValueError("Invalid value for `number_of_non_consecutive_one_day`, must not be `None`")  # noqa: E501

        self._number_of_non_consecutive_one_day = number_of_non_consecutive_one_day

    @property
    def software_tool(self):
        """Gets the software_tool of this DietaryAssessmentMethod.  # noqa: E501

        Name of the software used to collect the data  # noqa: E501

        :return: The software_tool of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._software_tool

    @software_tool.setter
    def software_tool(self, software_tool):
        """Sets the software_tool of this DietaryAssessmentMethod.

        Name of the software used to collect the data  # noqa: E501

        :param software_tool: The software_tool of this DietaryAssessmentMethod.  # noqa: E501
        :type: str
        """

        self._software_tool = software_tool

    @property
    def number_of_food_items(self):
        """Gets the number_of_food_items of this DietaryAssessmentMethod.  # noqa: E501

        Number of food items  # noqa: E501

        :return: The number_of_food_items of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: list[str]
        """
        return self._number_of_food_items

    @number_of_food_items.setter
    def number_of_food_items(self, number_of_food_items):
        """Sets the number_of_food_items of this DietaryAssessmentMethod.

        Number of food items  # noqa: E501

        :param number_of_food_items: The number_of_food_items of this DietaryAssessmentMethod.  # noqa: E501
        :type: list[str]
        """
        if number_of_food_items is None:
            raise ValueError("Invalid value for `number_of_food_items`, must not be `None`")  # noqa: E501

        self._number_of_food_items = number_of_food_items

    @property
    def record_types(self):
        """Gets the record_types of this DietaryAssessmentMethod.  # noqa: E501

        Consumption occasion, mean of consumption, quantified and described as eaten, recipes for self-made  # noqa: E501

        :return: The record_types of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: list[str]
        """
        return self._record_types

    @record_types.setter
    def record_types(self, record_types):
        """Sets the record_types of this DietaryAssessmentMethod.

        Consumption occasion, mean of consumption, quantified and described as eaten, recipes for self-made  # noqa: E501

        :param record_types: The record_types of this DietaryAssessmentMethod.  # noqa: E501
        :type: list[str]
        """
        if record_types is None:
            raise ValueError("Invalid value for `record_types`, must not be `None`")  # noqa: E501

        self._record_types = record_types

    @property
    def food_descriptors(self):
        """Gets the food_descriptors of this DietaryAssessmentMethod.  # noqa: E501

        Description using FoodEx2 facet  # noqa: E501

        :return: The food_descriptors of this DietaryAssessmentMethod.  # noqa: E501
        :rtype: list[str]
        """
        return self._food_descriptors

    @food_descriptors.setter
    def food_descriptors(self, food_descriptors):
        """Sets the food_descriptors of this DietaryAssessmentMethod.

        Description using FoodEx2 facet  # noqa: E501

        :param food_descriptors: The food_descriptors of this DietaryAssessmentMethod.  # noqa: E501
        :type: list[str]
        """
        if food_descriptors is None:
            raise ValueError("Invalid value for `food_descriptors`, must not be `None`")  # noqa: E501

        self._food_descriptors = food_descriptors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DietaryAssessmentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DietaryAssessmentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
