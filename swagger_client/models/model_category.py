# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_class': 'str',
        'model_sub_class': 'list[str]',
        'model_class_comment': 'str',
        'basic_process': 'list[str]'
    }

    attribute_map = {
        'model_class': 'modelClass',
        'model_sub_class': 'modelSubClass',
        'model_class_comment': 'modelClassComment',
        'basic_process': 'basicProcess'
    }

    def __init__(self, model_class=None, model_sub_class=None, model_class_comment=None, basic_process=None):  # noqa: E501
        """ModelCategory - a model defined in Swagger"""  # noqa: E501
        self._model_class = None
        self._model_sub_class = None
        self._model_class_comment = None
        self._basic_process = None
        self.discriminator = None
        self.model_class = model_class
        if model_sub_class is not None:
            self.model_sub_class = model_sub_class
        if model_class_comment is not None:
            self.model_class_comment = model_class_comment
        if basic_process is not None:
            self.basic_process = basic_process

    @property
    def model_class(self):
        """Gets the model_class of this ModelCategory.  # noqa: E501

        Type of model according to RAKIP classification  # noqa: E501

        :return: The model_class of this ModelCategory.  # noqa: E501
        :rtype: str
        """
        return self._model_class

    @model_class.setter
    def model_class(self, model_class):
        """Sets the model_class of this ModelCategory.

        Type of model according to RAKIP classification  # noqa: E501

        :param model_class: The model_class of this ModelCategory.  # noqa: E501
        :type: str
        """
        if model_class is None:
            raise ValueError("Invalid value for `model_class`, must not be `None`")  # noqa: E501

        self._model_class = model_class

    @property
    def model_sub_class(self):
        """Gets the model_sub_class of this ModelCategory.  # noqa: E501


        :return: The model_sub_class of this ModelCategory.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_sub_class

    @model_sub_class.setter
    def model_sub_class(self, model_sub_class):
        """Sets the model_sub_class of this ModelCategory.


        :param model_sub_class: The model_sub_class of this ModelCategory.  # noqa: E501
        :type: list[str]
        """

        self._model_sub_class = model_sub_class

    @property
    def model_class_comment(self):
        """Gets the model_class_comment of this ModelCategory.  # noqa: E501

        Empty  # noqa: E501

        :return: The model_class_comment of this ModelCategory.  # noqa: E501
        :rtype: str
        """
        return self._model_class_comment

    @model_class_comment.setter
    def model_class_comment(self, model_class_comment):
        """Sets the model_class_comment of this ModelCategory.

        Empty  # noqa: E501

        :param model_class_comment: The model_class_comment of this ModelCategory.  # noqa: E501
        :type: str
        """

        self._model_class_comment = model_class_comment

    @property
    def basic_process(self):
        """Gets the basic_process of this ModelCategory.  # noqa: E501


        :return: The basic_process of this ModelCategory.  # noqa: E501
        :rtype: list[str]
        """
        return self._basic_process

    @basic_process.setter
    def basic_process(self, basic_process):
        """Sets the basic_process of this ModelCategory.


        :param basic_process: The basic_process of this ModelCategory.  # noqa: E501
        :type: list[str]
        """

        self._basic_process = basic_process

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
