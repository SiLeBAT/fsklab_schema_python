# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'family_name': 'str',
        'given_name': 'str',
        'email': 'str',
        'telephone': 'str',
        'street_address': 'str',
        'country': 'str',
        'zip_code': 'str',
        'region': 'str',
        'time_zone': 'str',
        'gender': 'str',
        'note': 'str',
        'organization': 'str'
    }

    attribute_map = {
        'title': 'title',
        'family_name': 'familyName',
        'given_name': 'givenName',
        'email': 'email',
        'telephone': 'telephone',
        'street_address': 'streetAddress',
        'country': 'country',
        'zip_code': 'zipCode',
        'region': 'region',
        'time_zone': 'timeZone',
        'gender': 'gender',
        'note': 'note',
        'organization': 'organization'
    }

    def __init__(self, title=None, family_name=None, given_name=None, email=None, telephone=None, street_address=None, country=None, zip_code=None, region=None, time_zone=None, gender=None, note=None, organization=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._family_name = None
        self._given_name = None
        self._email = None
        self._telephone = None
        self._street_address = None
        self._country = None
        self._zip_code = None
        self._region = None
        self._time_zone = None
        self._gender = None
        self._note = None
        self._organization = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if family_name is not None:
            self.family_name = family_name
        if given_name is not None:
            self.given_name = given_name
        self.email = email
        if telephone is not None:
            self.telephone = telephone
        if street_address is not None:
            self.street_address = street_address
        if country is not None:
            self.country = country
        if zip_code is not None:
            self.zip_code = zip_code
        if region is not None:
            self.region = region
        if time_zone is not None:
            self.time_zone = time_zone
        if gender is not None:
            self.gender = gender
        if note is not None:
            self.note = note
        if organization is not None:
            self.organization = organization

    @property
    def title(self):
        """Gets the title of this Contact.  # noqa: E501


        :return: The title of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Contact.


        :param title: The title of this Contact.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def family_name(self):
        """Gets the family_name of this Contact.  # noqa: E501


        :return: The family_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Contact.


        :param family_name: The family_name of this Contact.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this Contact.  # noqa: E501


        :return: The given_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Contact.


        :param given_name: The given_name of this Contact.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501


        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def telephone(self):
        """Gets the telephone of this Contact.  # noqa: E501


        :return: The telephone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Contact.


        :param telephone: The telephone of this Contact.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def street_address(self):
        """Gets the street_address of this Contact.  # noqa: E501


        :return: The street_address of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Contact.


        :param street_address: The street_address of this Contact.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def country(self):
        """Gets the country of this Contact.  # noqa: E501


        :return: The country of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Contact.


        :param country: The country of this Contact.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def zip_code(self):
        """Gets the zip_code of this Contact.  # noqa: E501


        :return: The zip_code of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Contact.


        :param zip_code: The zip_code of this Contact.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def region(self):
        """Gets the region of this Contact.  # noqa: E501


        :return: The region of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Contact.


        :param region: The region of this Contact.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def time_zone(self):
        """Gets the time_zone of this Contact.  # noqa: E501


        :return: The time_zone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Contact.


        :param time_zone: The time_zone of this Contact.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def gender(self):
        """Gets the gender of this Contact.  # noqa: E501


        :return: The gender of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Contact.


        :param gender: The gender of this Contact.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def note(self):
        """Gets the note of this Contact.  # noqa: E501


        :return: The note of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Contact.


        :param note: The note of this Contact.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def organization(self):
        """Gets the organization of this Contact.  # noqa: E501


        :return: The organization of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Contact.


        :param organization: The organization of this Contact.  # noqa: E501
        :type: str
        """

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
