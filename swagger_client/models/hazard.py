# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Hazard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'unit': 'str',
        'adverse_effect': 'str',
        'source_of_contamination': 'str',
        'benchmark_dose': 'str',
        'maximum_residue_limit': 'str',
        'no_observed_adverse_affect_level': 'str',
        'lowest_observed_adverse_affect_level': 'str',
        'acceptable_operators_exposure_level': 'str',
        'acute_reference_dose': 'str',
        'acceptable_daily_intake': 'str',
        'ind_sum': 'str'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'unit': 'unit',
        'adverse_effect': 'adverseEffect',
        'source_of_contamination': 'sourceOfContamination',
        'benchmark_dose': 'benchmarkDose',
        'maximum_residue_limit': 'maximumResidueLimit',
        'no_observed_adverse_affect_level': 'noObservedAdverseAffectLevel',
        'lowest_observed_adverse_affect_level': 'lowestObservedAdverseAffectLevel',
        'acceptable_operators_exposure_level': 'acceptableOperatorsExposureLevel',
        'acute_reference_dose': 'acuteReferenceDose',
        'acceptable_daily_intake': 'acceptableDailyIntake',
        'ind_sum': 'indSum'
    }

    def __init__(self, type=None, name=None, description=None, unit=None, adverse_effect=None, source_of_contamination=None, benchmark_dose=None, maximum_residue_limit=None, no_observed_adverse_affect_level=None, lowest_observed_adverse_affect_level=None, acceptable_operators_exposure_level=None, acute_reference_dose=None, acceptable_daily_intake=None, ind_sum=None):  # noqa: E501
        """Hazard - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._description = None
        self._unit = None
        self._adverse_effect = None
        self._source_of_contamination = None
        self._benchmark_dose = None
        self._maximum_residue_limit = None
        self._no_observed_adverse_affect_level = None
        self._lowest_observed_adverse_affect_level = None
        self._acceptable_operators_exposure_level = None
        self._acute_reference_dose = None
        self._acceptable_daily_intake = None
        self._ind_sum = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.name = name
        if description is not None:
            self.description = description
        if unit is not None:
            self.unit = unit
        if adverse_effect is not None:
            self.adverse_effect = adverse_effect
        if source_of_contamination is not None:
            self.source_of_contamination = source_of_contamination
        if benchmark_dose is not None:
            self.benchmark_dose = benchmark_dose
        if maximum_residue_limit is not None:
            self.maximum_residue_limit = maximum_residue_limit
        if no_observed_adverse_affect_level is not None:
            self.no_observed_adverse_affect_level = no_observed_adverse_affect_level
        if lowest_observed_adverse_affect_level is not None:
            self.lowest_observed_adverse_affect_level = lowest_observed_adverse_affect_level
        if acceptable_operators_exposure_level is not None:
            self.acceptable_operators_exposure_level = acceptable_operators_exposure_level
        if acute_reference_dose is not None:
            self.acute_reference_dose = acute_reference_dose
        if acceptable_daily_intake is not None:
            self.acceptable_daily_intake = acceptable_daily_intake
        if ind_sum is not None:
            self.ind_sum = ind_sum

    @property
    def type(self):
        """Gets the type of this Hazard.  # noqa: E501

        General classification of the hazard for which the model or data applies  # noqa: E501

        :return: The type of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Hazard.

        General classification of the hazard for which the model or data applies  # noqa: E501

        :param type: The type of this Hazard.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Hazard.  # noqa: E501

        Name of the hazard (agent, contaminant, chemical) for which the data or model applies  # noqa: E501

        :return: The name of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hazard.

        Name of the hazard (agent, contaminant, chemical) for which the data or model applies  # noqa: E501

        :param name: The name of this Hazard.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Hazard.  # noqa: E501

        Description of the hazard for which the model or data applies  # noqa: E501

        :return: The description of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Hazard.

        Description of the hazard for which the model or data applies  # noqa: E501

        :param description: The description of this Hazard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unit(self):
        """Gets the unit of this Hazard.  # noqa: E501

        Unit of the hazard for which the model or data applies  # noqa: E501

        :return: The unit of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Hazard.

        Unit of the hazard for which the model or data applies  # noqa: E501

        :param unit: The unit of this Hazard.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def adverse_effect(self):
        """Gets the adverse_effect of this Hazard.  # noqa: E501

        Adverse effect induced by hazard about morbidity, mortality, and etcetera  # noqa: E501

        :return: The adverse_effect of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._adverse_effect

    @adverse_effect.setter
    def adverse_effect(self, adverse_effect):
        """Sets the adverse_effect of this Hazard.

        Adverse effect induced by hazard about morbidity, mortality, and etcetera  # noqa: E501

        :param adverse_effect: The adverse_effect of this Hazard.  # noqa: E501
        :type: str
        """

        self._adverse_effect = adverse_effect

    @property
    def source_of_contamination(self):
        """Gets the source_of_contamination of this Hazard.  # noqa: E501

        Origin of the contamination, source  # noqa: E501

        :return: The source_of_contamination of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._source_of_contamination

    @source_of_contamination.setter
    def source_of_contamination(self, source_of_contamination):
        """Sets the source_of_contamination of this Hazard.

        Origin of the contamination, source  # noqa: E501

        :param source_of_contamination: The source_of_contamination of this Hazard.  # noqa: E501
        :type: str
        """

        self._source_of_contamination = source_of_contamination

    @property
    def benchmark_dose(self):
        """Gets the benchmark_dose of this Hazard.  # noqa: E501

        A dose or concentration that produces a predetermined change in response rate of an adverse effect (called the benchmark response or BMR) compared to background  # noqa: E501

        :return: The benchmark_dose of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._benchmark_dose

    @benchmark_dose.setter
    def benchmark_dose(self, benchmark_dose):
        """Sets the benchmark_dose of this Hazard.

        A dose or concentration that produces a predetermined change in response rate of an adverse effect (called the benchmark response or BMR) compared to background  # noqa: E501

        :param benchmark_dose: The benchmark_dose of this Hazard.  # noqa: E501
        :type: str
        """

        self._benchmark_dose = benchmark_dose

    @property
    def maximum_residue_limit(self):
        """Gets the maximum_residue_limit of this Hazard.  # noqa: E501

        International regulations and permissible maximum residue levels in food and drinking water  # noqa: E501

        :return: The maximum_residue_limit of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._maximum_residue_limit

    @maximum_residue_limit.setter
    def maximum_residue_limit(self, maximum_residue_limit):
        """Sets the maximum_residue_limit of this Hazard.

        International regulations and permissible maximum residue levels in food and drinking water  # noqa: E501

        :param maximum_residue_limit: The maximum_residue_limit of this Hazard.  # noqa: E501
        :type: str
        """

        self._maximum_residue_limit = maximum_residue_limit

    @property
    def no_observed_adverse_affect_level(self):
        """Gets the no_observed_adverse_affect_level of this Hazard.  # noqa: E501

        Level of exposure of an organism, found by experiment or observation, at which there is no biologically or statistically significant increase in the frequency or severity of any adverse effects in the exposed population when compared to its appropriate control  # noqa: E501

        :return: The no_observed_adverse_affect_level of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._no_observed_adverse_affect_level

    @no_observed_adverse_affect_level.setter
    def no_observed_adverse_affect_level(self, no_observed_adverse_affect_level):
        """Sets the no_observed_adverse_affect_level of this Hazard.

        Level of exposure of an organism, found by experiment or observation, at which there is no biologically or statistically significant increase in the frequency or severity of any adverse effects in the exposed population when compared to its appropriate control  # noqa: E501

        :param no_observed_adverse_affect_level: The no_observed_adverse_affect_level of this Hazard.  # noqa: E501
        :type: str
        """

        self._no_observed_adverse_affect_level = no_observed_adverse_affect_level

    @property
    def lowest_observed_adverse_affect_level(self):
        """Gets the lowest_observed_adverse_affect_level of this Hazard.  # noqa: E501

        Lowest concentration or amount of a substance found by experiment or observation that causes an adverse alteration of morphology, function, capacity, growth, development, or lifespan of a target organism distinguished from normal organisms of the same species under defined conditions of exposure  # noqa: E501

        :return: The lowest_observed_adverse_affect_level of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._lowest_observed_adverse_affect_level

    @lowest_observed_adverse_affect_level.setter
    def lowest_observed_adverse_affect_level(self, lowest_observed_adverse_affect_level):
        """Sets the lowest_observed_adverse_affect_level of this Hazard.

        Lowest concentration or amount of a substance found by experiment or observation that causes an adverse alteration of morphology, function, capacity, growth, development, or lifespan of a target organism distinguished from normal organisms of the same species under defined conditions of exposure  # noqa: E501

        :param lowest_observed_adverse_affect_level: The lowest_observed_adverse_affect_level of this Hazard.  # noqa: E501
        :type: str
        """

        self._lowest_observed_adverse_affect_level = lowest_observed_adverse_affect_level

    @property
    def acceptable_operators_exposure_level(self):
        """Gets the acceptable_operators_exposure_level of this Hazard.  # noqa: E501

        Maximum amount of active substance to which the operator may be exposed without any adverse health effects. The AOEL is expressed as milligrams of the chemical per kilogram body weight of the operator  # noqa: E501

        :return: The acceptable_operators_exposure_level of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._acceptable_operators_exposure_level

    @acceptable_operators_exposure_level.setter
    def acceptable_operators_exposure_level(self, acceptable_operators_exposure_level):
        """Sets the acceptable_operators_exposure_level of this Hazard.

        Maximum amount of active substance to which the operator may be exposed without any adverse health effects. The AOEL is expressed as milligrams of the chemical per kilogram body weight of the operator  # noqa: E501

        :param acceptable_operators_exposure_level: The acceptable_operators_exposure_level of this Hazard.  # noqa: E501
        :type: str
        """

        self._acceptable_operators_exposure_level = acceptable_operators_exposure_level

    @property
    def acute_reference_dose(self):
        """Gets the acute_reference_dose of this Hazard.  # noqa: E501

        An estimate (with uncertainty spanning perhaps an order of magnitude) of a daily oral exposure for an acute duration (24 hours or less) to the human population (including sensitive subgroups) that is likely to be without an appreciable risk of deleterious effects during a lifetime  # noqa: E501

        :return: The acute_reference_dose of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._acute_reference_dose

    @acute_reference_dose.setter
    def acute_reference_dose(self, acute_reference_dose):
        """Sets the acute_reference_dose of this Hazard.

        An estimate (with uncertainty spanning perhaps an order of magnitude) of a daily oral exposure for an acute duration (24 hours or less) to the human population (including sensitive subgroups) that is likely to be without an appreciable risk of deleterious effects during a lifetime  # noqa: E501

        :param acute_reference_dose: The acute_reference_dose of this Hazard.  # noqa: E501
        :type: str
        """

        self._acute_reference_dose = acute_reference_dose

    @property
    def acceptable_daily_intake(self):
        """Gets the acceptable_daily_intake of this Hazard.  # noqa: E501

        Measure of amount of a specific substance in food or in drinking water tahta can be ingested (orally) on a daily basis over a lifetime without an appreciable health risk  # noqa: E501

        :return: The acceptable_daily_intake of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._acceptable_daily_intake

    @acceptable_daily_intake.setter
    def acceptable_daily_intake(self, acceptable_daily_intake):
        """Sets the acceptable_daily_intake of this Hazard.

        Measure of amount of a specific substance in food or in drinking water tahta can be ingested (orally) on a daily basis over a lifetime without an appreciable health risk  # noqa: E501

        :param acceptable_daily_intake: The acceptable_daily_intake of this Hazard.  # noqa: E501
        :type: str
        """

        self._acceptable_daily_intake = acceptable_daily_intake

    @property
    def ind_sum(self):
        """Gets the ind_sum of this Hazard.  # noqa: E501

        Define if the parameter reported is an individual residue/analyte, a summed residue definition or part of a sum a summed residue definition  # noqa: E501

        :return: The ind_sum of this Hazard.  # noqa: E501
        :rtype: str
        """
        return self._ind_sum

    @ind_sum.setter
    def ind_sum(self, ind_sum):
        """Sets the ind_sum of this Hazard.

        Define if the parameter reported is an individual residue/analyte, a summed residue definition or part of a sum a summed residue definition  # noqa: E501

        :param ind_sum: The ind_sum of this Hazard.  # noqa: E501
        :type: str
        """

        self._ind_sum = ind_sum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Hazard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hazard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
