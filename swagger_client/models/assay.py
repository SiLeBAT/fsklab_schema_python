# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Assay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'moisture_percentage': 'str',
        'fat_percentage': 'str',
        'detection_limit': 'str',
        'quantification_limit': 'str',
        'left_censored_data': 'str',
        'contamination_range': 'str',
        'uncertainty_value': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'moisture_percentage': 'moisturePercentage',
        'fat_percentage': 'fatPercentage',
        'detection_limit': 'detectionLimit',
        'quantification_limit': 'quantificationLimit',
        'left_censored_data': 'leftCensoredData',
        'contamination_range': 'contaminationRange',
        'uncertainty_value': 'uncertaintyValue'
    }

    def __init__(self, name=None, description=None, moisture_percentage=None, fat_percentage=None, detection_limit=None, quantification_limit=None, left_censored_data=None, contamination_range=None, uncertainty_value=None):  # noqa: E501
        """Assay - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._moisture_percentage = None
        self._fat_percentage = None
        self._detection_limit = None
        self._quantification_limit = None
        self._left_censored_data = None
        self._contamination_range = None
        self._uncertainty_value = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if moisture_percentage is not None:
            self.moisture_percentage = moisture_percentage
        if fat_percentage is not None:
            self.fat_percentage = fat_percentage
        if detection_limit is not None:
            self.detection_limit = detection_limit
        if quantification_limit is not None:
            self.quantification_limit = quantification_limit
        if left_censored_data is not None:
            self.left_censored_data = left_censored_data
        if contamination_range is not None:
            self.contamination_range = contamination_range
        if uncertainty_value is not None:
            self.uncertainty_value = uncertainty_value

    @property
    def name(self):
        """Gets the name of this Assay.  # noqa: E501

        A name given to the assay  # noqa: E501

        :return: The name of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assay.

        A name given to the assay  # noqa: E501

        :param name: The name of this Assay.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Assay.  # noqa: E501

        General description of the assay. Corresponds to the Protocol REF in ISA  # noqa: E501

        :return: The description of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assay.

        General description of the assay. Corresponds to the Protocol REF in ISA  # noqa: E501

        :param description: The description of this Assay.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def moisture_percentage(self):
        """Gets the moisture_percentage of this Assay.  # noqa: E501

        Percentage of moisture in the original sample  # noqa: E501

        :return: The moisture_percentage of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._moisture_percentage

    @moisture_percentage.setter
    def moisture_percentage(self, moisture_percentage):
        """Sets the moisture_percentage of this Assay.

        Percentage of moisture in the original sample  # noqa: E501

        :param moisture_percentage: The moisture_percentage of this Assay.  # noqa: E501
        :type: str
        """

        self._moisture_percentage = moisture_percentage

    @property
    def fat_percentage(self):
        """Gets the fat_percentage of this Assay.  # noqa: E501

        Percentage of fat in the original sample  # noqa: E501

        :return: The fat_percentage of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._fat_percentage

    @fat_percentage.setter
    def fat_percentage(self, fat_percentage):
        """Sets the fat_percentage of this Assay.

        Percentage of fat in the original sample  # noqa: E501

        :param fat_percentage: The fat_percentage of this Assay.  # noqa: E501
        :type: str
        """

        self._fat_percentage = fat_percentage

    @property
    def detection_limit(self):
        """Gets the detection_limit of this Assay.  # noqa: E501

        Limit of detection reported in the unit specified by the variable 'Hazard unit'  # noqa: E501

        :return: The detection_limit of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._detection_limit

    @detection_limit.setter
    def detection_limit(self, detection_limit):
        """Sets the detection_limit of this Assay.

        Limit of detection reported in the unit specified by the variable 'Hazard unit'  # noqa: E501

        :param detection_limit: The detection_limit of this Assay.  # noqa: E501
        :type: str
        """

        self._detection_limit = detection_limit

    @property
    def quantification_limit(self):
        """Gets the quantification_limit of this Assay.  # noqa: E501

        Limit of quantification reported in the unit specified by the variable 'Hazard unit'  # noqa: E501

        :return: The quantification_limit of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._quantification_limit

    @quantification_limit.setter
    def quantification_limit(self, quantification_limit):
        """Sets the quantification_limit of this Assay.

        Limit of quantification reported in the unit specified by the variable 'Hazard unit'  # noqa: E501

        :param quantification_limit: The quantification_limit of this Assay.  # noqa: E501
        :type: str
        """

        self._quantification_limit = quantification_limit

    @property
    def left_censored_data(self):
        """Gets the left_censored_data of this Assay.  # noqa: E501

        Percentage of measures equal to LOQ and/or LOD  # noqa: E501

        :return: The left_censored_data of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._left_censored_data

    @left_censored_data.setter
    def left_censored_data(self, left_censored_data):
        """Sets the left_censored_data of this Assay.

        Percentage of measures equal to LOQ and/or LOD  # noqa: E501

        :param left_censored_data: The left_censored_data of this Assay.  # noqa: E501
        :type: str
        """

        self._left_censored_data = left_censored_data

    @property
    def contamination_range(self):
        """Gets the contamination_range of this Assay.  # noqa: E501

        Range of result of the analytical measure reported in the unit specified by the variable 'Hazard unit' before censored data treatment  # noqa: E501

        :return: The contamination_range of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._contamination_range

    @contamination_range.setter
    def contamination_range(self, contamination_range):
        """Sets the contamination_range of this Assay.

        Range of result of the analytical measure reported in the unit specified by the variable 'Hazard unit' before censored data treatment  # noqa: E501

        :param contamination_range: The contamination_range of this Assay.  # noqa: E501
        :type: str
        """

        self._contamination_range = contamination_range

    @property
    def uncertainty_value(self):
        """Gets the uncertainty_value of this Assay.  # noqa: E501

        Indicate the expanded uncertainty (usually 95% confidence interval) value associated with the measurement expressed in the unit reported in the field 'Hazard unit'  # noqa: E501

        :return: The uncertainty_value of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_value

    @uncertainty_value.setter
    def uncertainty_value(self, uncertainty_value):
        """Sets the uncertainty_value of this Assay.

        Indicate the expanded uncertainty (usually 95% confidence interval) value associated with the measurement expressed in the unit reported in the field 'Hazard unit'  # noqa: E501

        :param uncertainty_value: The uncertainty_value of this Assay.  # noqa: E501
        :type: str
        """

        self._uncertainty_value = uncertainty_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
