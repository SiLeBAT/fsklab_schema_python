# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.model import Model  # noqa: F401,E501

class RiskModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general_information': 'PredictiveModelGeneralInformation',
        'scope': 'ExposureModelScope',
        'data_background': 'GenericModelDataBackground',
        'model_math': 'GenericModelModelMath'
    }
    if hasattr(Model, "swagger_types"):
        swagger_types.update(Model.swagger_types)

    attribute_map = {
        'general_information': 'generalInformation',
        'scope': 'scope',
        'data_background': 'dataBackground',
        'model_math': 'modelMath'
    }
    if hasattr(Model, "attribute_map"):
        attribute_map.update(Model.attribute_map)

    def __init__(self, general_information=None, scope=None, data_background=None, model_math=None, *args, **kwargs):  # noqa: E501
        """RiskModel - a model defined in Swagger"""  # noqa: E501
        self._general_information = None
        self._scope = None
        self._data_background = None
        self._model_math = None
        self.discriminator = None
        if general_information is not None:
            self.general_information = general_information
        if scope is not None:
            self.scope = scope
        if data_background is not None:
            self.data_background = data_background
        if model_math is not None:
            self.model_math = model_math
        Model.__init__(self, *args, **kwargs)

    @property
    def general_information(self):
        """Gets the general_information of this RiskModel.  # noqa: E501


        :return: The general_information of this RiskModel.  # noqa: E501
        :rtype: PredictiveModelGeneralInformation
        """
        return self._general_information

    @general_information.setter
    def general_information(self, general_information):
        """Sets the general_information of this RiskModel.


        :param general_information: The general_information of this RiskModel.  # noqa: E501
        :type: PredictiveModelGeneralInformation
        """

        self._general_information = general_information

    @property
    def scope(self):
        """Gets the scope of this RiskModel.  # noqa: E501


        :return: The scope of this RiskModel.  # noqa: E501
        :rtype: ExposureModelScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RiskModel.


        :param scope: The scope of this RiskModel.  # noqa: E501
        :type: ExposureModelScope
        """

        self._scope = scope

    @property
    def data_background(self):
        """Gets the data_background of this RiskModel.  # noqa: E501


        :return: The data_background of this RiskModel.  # noqa: E501
        :rtype: GenericModelDataBackground
        """
        return self._data_background

    @data_background.setter
    def data_background(self, data_background):
        """Sets the data_background of this RiskModel.


        :param data_background: The data_background of this RiskModel.  # noqa: E501
        :type: GenericModelDataBackground
        """

        self._data_background = data_background

    @property
    def model_math(self):
        """Gets the model_math of this RiskModel.  # noqa: E501


        :return: The model_math of this RiskModel.  # noqa: E501
        :rtype: GenericModelModelMath
        """
        return self._model_math

    @model_math.setter
    def model_math(self, model_math):
        """Sets the model_math of this RiskModel.


        :param model_math: The model_math of this RiskModel.  # noqa: E501
        :type: GenericModelModelMath
        """

        self._model_math = model_math

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
