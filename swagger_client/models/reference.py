# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_reference_description': 'bool',
        'publication_type': 'str',
        '_date': 'date',
        'pmid': 'str',
        'doi': 'str',
        'author_list': 'str',
        'title': 'str',
        'abstract': 'str',
        'journal': 'str',
        'volume': 'str',
        'issue': 'str',
        'status': 'str',
        'website': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'is_reference_description': 'isReferenceDescription',
        'publication_type': 'publicationType',
        '_date': 'date',
        'pmid': 'pmid',
        'doi': 'doi',
        'author_list': 'authorList',
        'title': 'title',
        'abstract': 'abstract',
        'journal': 'journal',
        'volume': 'volume',
        'issue': 'issue',
        'status': 'status',
        'website': 'website',
        'comment': 'comment'
    }

    def __init__(self, is_reference_description=None, publication_type=None, _date=None, pmid=None, doi=None, author_list=None, title=None, abstract=None, journal=None, volume=None, issue=None, status=None, website=None, comment=None):  # noqa: E501
        """Reference - a model defined in Swagger"""  # noqa: E501
        self._is_reference_description = None
        self._publication_type = None
        self.__date = None
        self._pmid = None
        self._doi = None
        self._author_list = None
        self._title = None
        self._abstract = None
        self._journal = None
        self._volume = None
        self._issue = None
        self._status = None
        self._website = None
        self._comment = None
        self.discriminator = None
        self.is_reference_description = is_reference_description
        if publication_type is not None:
            self.publication_type = publication_type
        if _date is not None:
            self._date = _date
        if pmid is not None:
            self.pmid = pmid
        self.doi = doi
        if author_list is not None:
            self.author_list = author_list
        self.title = title
        if abstract is not None:
            self.abstract = abstract
        if journal is not None:
            self.journal = journal
        if volume is not None:
            self.volume = volume
        if issue is not None:
            self.issue = issue
        if status is not None:
            self.status = status
        if website is not None:
            self.website = website
        if comment is not None:
            self.comment = comment

    @property
    def is_reference_description(self):
        """Gets the is_reference_description of this Reference.  # noqa: E501

        Indicates whether this specific publication serves as the reference description for the model. There has to be at least one reference where this field is set to 'True'  # noqa: E501

        :return: The is_reference_description of this Reference.  # noqa: E501
        :rtype: bool
        """
        return self._is_reference_description

    @is_reference_description.setter
    def is_reference_description(self, is_reference_description):
        """Sets the is_reference_description of this Reference.

        Indicates whether this specific publication serves as the reference description for the model. There has to be at least one reference where this field is set to 'True'  # noqa: E501

        :param is_reference_description: The is_reference_description of this Reference.  # noqa: E501
        :type: bool
        """
        if is_reference_description is None:
            raise ValueError("Invalid value for `is_reference_description`, must not be `None`")  # noqa: E501

        self._is_reference_description = is_reference_description

    @property
    def publication_type(self):
        """Gets the publication_type of this Reference.  # noqa: E501

        The type of publication, e.g. Report, Journal article, Book, Online database, ...  # noqa: E501

        :return: The publication_type of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._publication_type

    @publication_type.setter
    def publication_type(self, publication_type):
        """Sets the publication_type of this Reference.

        The type of publication, e.g. Report, Journal article, Book, Online database, ...  # noqa: E501

        :param publication_type: The publication_type of this Reference.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABST", "ADVS", "AGGR", "ANCIENT", "ART", "BILL", "BLOG", "BOOK", "CASE", "CHAP", "CHART", "CLSWK", "COMP", "CONF", "CPAPER", "CTLG", "DATA", "DBASE", "DICT", "EBOOK", "ECHAP", "EDBOOK", "EJOUR", "ELECT", "ENCYC", "EQUA", "FIGURE", "GEN", "GOVDOC", "GRANT", "HEAR", "ICOMM", "INPR", "JOUR", "JFULL", "LEGAL", "MANSCPT", "MAP", "MGZN", "MPCT", "MULTI", "MUSIC", "NEW", "PAMP", "PAT", "PCOMM", "RPRT", "SER", "SLIDE", "SOUND", "STAND", "STAT", "THES", "UNPB", "VIDEO"]  # noqa: E501
        if publication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `publication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(publication_type, allowed_values)
            )

        self._publication_type = publication_type

    @property
    def _date(self):
        """Gets the _date of this Reference.  # noqa: E501

        Temporal information on the publication date  # noqa: E501

        :return: The _date of this Reference.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Reference.

        Temporal information on the publication date  # noqa: E501

        :param _date: The _date of this Reference.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def pmid(self):
        """Gets the pmid of this Reference.  # noqa: E501

        The PubMed ID related to this publication  # noqa: E501

        :return: The pmid of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._pmid

    @pmid.setter
    def pmid(self, pmid):
        """Sets the pmid of this Reference.

        The PubMed ID related to this publication  # noqa: E501

        :param pmid: The pmid of this Reference.  # noqa: E501
        :type: str
        """

        self._pmid = pmid

    @property
    def doi(self):
        """Gets the doi of this Reference.  # noqa: E501

        The DOI related to this publication  # noqa: E501

        :return: The doi of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Reference.

        The DOI related to this publication  # noqa: E501

        :param doi: The doi of this Reference.  # noqa: E501
        :type: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")  # noqa: E501

        self._doi = doi

    @property
    def author_list(self):
        """Gets the author_list of this Reference.  # noqa: E501

        Name and surname of the authors who contributed to this publication  # noqa: E501

        :return: The author_list of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._author_list

    @author_list.setter
    def author_list(self, author_list):
        """Sets the author_list of this Reference.

        Name and surname of the authors who contributed to this publication  # noqa: E501

        :param author_list: The author_list of this Reference.  # noqa: E501
        :type: str
        """

        self._author_list = author_list

    @property
    def title(self):
        """Gets the title of this Reference.  # noqa: E501

        Title of the publication in which the model or the data has been described  # noqa: E501

        :return: The title of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Reference.

        Title of the publication in which the model or the data has been described  # noqa: E501

        :param title: The title of this Reference.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this Reference.  # noqa: E501

        Abstract of the publication in which the model or the data has been described  # noqa: E501

        :return: The abstract of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this Reference.

        Abstract of the publication in which the model or the data has been described  # noqa: E501

        :param abstract: The abstract of this Reference.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def journal(self):
        """Gets the journal of this Reference.  # noqa: E501

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :return: The journal of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._journal

    @journal.setter
    def journal(self, journal):
        """Sets the journal of this Reference.

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :param journal: The journal of this Reference.  # noqa: E501
        :type: str
        """

        self._journal = journal

    @property
    def volume(self):
        """Gets the volume of this Reference.  # noqa: E501

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :return: The volume of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Reference.

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :param volume: The volume of this Reference.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def issue(self):
        """Gets the issue of this Reference.  # noqa: E501

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :return: The issue of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Reference.

        Data on the details of the journal in which the model or the data has been described  # noqa: E501

        :param issue: The issue of this Reference.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def status(self):
        """Gets the status of this Reference.  # noqa: E501

        The status of this publication, e.g. Published, Submitted, etc.  # noqa: E501

        :return: The status of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Reference.

        The status of this publication, e.g. Published, Submitted, etc.  # noqa: E501

        :param status: The status of this Reference.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def website(self):
        """Gets the website of this Reference.  # noqa: E501

        A link to the publication website (different from DOI)  # noqa: E501

        :return: The website of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Reference.

        A link to the publication website (different from DOI)  # noqa: E501

        :param website: The website of this Reference.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def comment(self):
        """Gets the comment of this Reference.  # noqa: E501

        Further comments related to the reference description, e.g. which section in there describes the specific model or which figure in there can be reproduced with the visualization script  # noqa: E501

        :return: The comment of this Reference.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Reference.

        Further comments related to the reference description, e.g. which section in there describes the specific model or which figure in there can be reproduced with the visualization script  # noqa: E501

        :param comment: The comment of this Reference.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
