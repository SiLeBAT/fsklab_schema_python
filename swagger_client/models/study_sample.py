# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StudySample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_name': 'str',
        'protocol_of_sample_collection': 'str',
        'sampling_strategy': 'str',
        'type_of_sampling_program': 'str',
        'sampling_method': 'str',
        'sampling_plan': 'str',
        'sampling_weight': 'str',
        'sampling_size': 'str',
        'lot_size_unit': 'str',
        'sampling_point': 'str'
    }

    attribute_map = {
        'sample_name': 'sampleName',
        'protocol_of_sample_collection': 'protocolOfSampleCollection',
        'sampling_strategy': 'samplingStrategy',
        'type_of_sampling_program': 'typeOfSamplingProgram',
        'sampling_method': 'samplingMethod',
        'sampling_plan': 'samplingPlan',
        'sampling_weight': 'samplingWeight',
        'sampling_size': 'samplingSize',
        'lot_size_unit': 'lotSizeUnit',
        'sampling_point': 'samplingPoint'
    }

    def __init__(self, sample_name=None, protocol_of_sample_collection=None, sampling_strategy=None, type_of_sampling_program=None, sampling_method=None, sampling_plan=None, sampling_weight=None, sampling_size=None, lot_size_unit=None, sampling_point=None):  # noqa: E501
        """StudySample - a model defined in Swagger"""  # noqa: E501
        self._sample_name = None
        self._protocol_of_sample_collection = None
        self._sampling_strategy = None
        self._type_of_sampling_program = None
        self._sampling_method = None
        self._sampling_plan = None
        self._sampling_weight = None
        self._sampling_size = None
        self._lot_size_unit = None
        self._sampling_point = None
        self.discriminator = None
        self.sample_name = sample_name
        self.protocol_of_sample_collection = protocol_of_sample_collection
        if sampling_strategy is not None:
            self.sampling_strategy = sampling_strategy
        if type_of_sampling_program is not None:
            self.type_of_sampling_program = type_of_sampling_program
        if sampling_method is not None:
            self.sampling_method = sampling_method
        self.sampling_plan = sampling_plan
        self.sampling_weight = sampling_weight
        self.sampling_size = sampling_size
        if lot_size_unit is not None:
            self.lot_size_unit = lot_size_unit
        if sampling_point is not None:
            self.sampling_point = sampling_point

    @property
    def sample_name(self):
        """Gets the sample_name of this StudySample.  # noqa: E501

        An unambiguous ID given to the samples used in the assay  # noqa: E501

        :return: The sample_name of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this StudySample.

        An unambiguous ID given to the samples used in the assay  # noqa: E501

        :param sample_name: The sample_name of this StudySample.  # noqa: E501
        :type: str
        """
        if sample_name is None:
            raise ValueError("Invalid value for `sample_name`, must not be `None`")  # noqa: E501

        self._sample_name = sample_name

    @property
    def protocol_of_sample_collection(self):
        """Gets the protocol_of_sample_collection of this StudySample.  # noqa: E501

        Additional protocol for sample and sample collection. Corresponds to the Protocol REF in ISA  # noqa: E501

        :return: The protocol_of_sample_collection of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._protocol_of_sample_collection

    @protocol_of_sample_collection.setter
    def protocol_of_sample_collection(self, protocol_of_sample_collection):
        """Sets the protocol_of_sample_collection of this StudySample.

        Additional protocol for sample and sample collection. Corresponds to the Protocol REF in ISA  # noqa: E501

        :param protocol_of_sample_collection: The protocol_of_sample_collection of this StudySample.  # noqa: E501
        :type: str
        """
        if protocol_of_sample_collection is None:
            raise ValueError("Invalid value for `protocol_of_sample_collection`, must not be `None`")  # noqa: E501

        self._protocol_of_sample_collection = protocol_of_sample_collection

    @property
    def sampling_strategy(self):
        """Gets the sampling_strategy of this StudySample.  # noqa: E501

        Sampling strategy (ref. EUROSTAT - Typology of sampling strategy, version of July 2009)  # noqa: E501

        :return: The sampling_strategy of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_strategy

    @sampling_strategy.setter
    def sampling_strategy(self, sampling_strategy):
        """Sets the sampling_strategy of this StudySample.

        Sampling strategy (ref. EUROSTAT - Typology of sampling strategy, version of July 2009)  # noqa: E501

        :param sampling_strategy: The sampling_strategy of this StudySample.  # noqa: E501
        :type: str
        """

        self._sampling_strategy = sampling_strategy

    @property
    def type_of_sampling_program(self):
        """Gets the type_of_sampling_program of this StudySample.  # noqa: E501

        Indicate the type of programm for which the samples have been collected  # noqa: E501

        :return: The type_of_sampling_program of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._type_of_sampling_program

    @type_of_sampling_program.setter
    def type_of_sampling_program(self, type_of_sampling_program):
        """Sets the type_of_sampling_program of this StudySample.

        Indicate the type of programm for which the samples have been collected  # noqa: E501

        :param type_of_sampling_program: The type_of_sampling_program of this StudySample.  # noqa: E501
        :type: str
        """

        self._type_of_sampling_program = type_of_sampling_program

    @property
    def sampling_method(self):
        """Gets the sampling_method of this StudySample.  # noqa: E501

        Sampling method used to take the sample  # noqa: E501

        :return: The sampling_method of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_method

    @sampling_method.setter
    def sampling_method(self, sampling_method):
        """Sets the sampling_method of this StudySample.

        Sampling method used to take the sample  # noqa: E501

        :param sampling_method: The sampling_method of this StudySample.  # noqa: E501
        :type: str
        """

        self._sampling_method = sampling_method

    @property
    def sampling_plan(self):
        """Gets the sampling_plan of this StudySample.  # noqa: E501

        Description of data collection technique (stratified or complex sampling (several stages))  # noqa: E501

        :return: The sampling_plan of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_plan

    @sampling_plan.setter
    def sampling_plan(self, sampling_plan):
        """Sets the sampling_plan of this StudySample.

        Description of data collection technique (stratified or complex sampling (several stages))  # noqa: E501

        :param sampling_plan: The sampling_plan of this StudySample.  # noqa: E501
        :type: str
        """
        if sampling_plan is None:
            raise ValueError("Invalid value for `sampling_plan`, must not be `None`")  # noqa: E501

        self._sampling_plan = sampling_plan

    @property
    def sampling_weight(self):
        """Gets the sampling_weight of this StudySample.  # noqa: E501

        Description of the method employed to compute sampling weight (nonresponse-adjusted weight)  # noqa: E501

        :return: The sampling_weight of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_weight

    @sampling_weight.setter
    def sampling_weight(self, sampling_weight):
        """Sets the sampling_weight of this StudySample.

        Description of the method employed to compute sampling weight (nonresponse-adjusted weight)  # noqa: E501

        :param sampling_weight: The sampling_weight of this StudySample.  # noqa: E501
        :type: str
        """
        if sampling_weight is None:
            raise ValueError("Invalid value for `sampling_weight`, must not be `None`")  # noqa: E501

        self._sampling_weight = sampling_weight

    @property
    def sampling_size(self):
        """Gets the sampling_size of this StudySample.  # noqa: E501

        Number of units, full participants, partial participants, eligibles, not eligible, unresolved (eligibility status not resolved)…  # noqa: E501

        :return: The sampling_size of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_size

    @sampling_size.setter
    def sampling_size(self, sampling_size):
        """Sets the sampling_size of this StudySample.

        Number of units, full participants, partial participants, eligibles, not eligible, unresolved (eligibility status not resolved)…  # noqa: E501

        :param sampling_size: The sampling_size of this StudySample.  # noqa: E501
        :type: str
        """
        if sampling_size is None:
            raise ValueError("Invalid value for `sampling_size`, must not be `None`")  # noqa: E501

        self._sampling_size = sampling_size

    @property
    def lot_size_unit(self):
        """Gets the lot_size_unit of this StudySample.  # noqa: E501

        Unit in which the lot size is expressed  # noqa: E501

        :return: The lot_size_unit of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._lot_size_unit

    @lot_size_unit.setter
    def lot_size_unit(self, lot_size_unit):
        """Sets the lot_size_unit of this StudySample.

        Unit in which the lot size is expressed  # noqa: E501

        :param lot_size_unit: The lot_size_unit of this StudySample.  # noqa: E501
        :type: str
        """

        self._lot_size_unit = lot_size_unit

    @property
    def sampling_point(self):
        """Gets the sampling_point of this StudySample.  # noqa: E501

        Point in the food chain where the sample was taken. (Doc. ESTAT/F5/ES/155 “Data dictionary of activities of the establishments”)  # noqa: E501

        :return: The sampling_point of this StudySample.  # noqa: E501
        :rtype: str
        """
        return self._sampling_point

    @sampling_point.setter
    def sampling_point(self, sampling_point):
        """Sets the sampling_point of this StudySample.

        Point in the food chain where the sample was taken. (Doc. ESTAT/F5/ES/155 “Data dictionary of activities of the establishments”)  # noqa: E501

        :param sampling_point: The sampling_point of this StudySample.  # noqa: E501
        :type: str
        """

        self._sampling_point = sampling_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudySample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudySample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
