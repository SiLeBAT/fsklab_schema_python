# coding: utf-8

"""
    RAKIP Generic model

    TODO  # noqa: E501

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QualityMeasures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sse': 'float',
        'mse': 'float',
        'rmse': 'float',
        'rsquared': 'float',
        'aic': 'float',
        'bic': 'float',
        'sensitivity_analysis': 'str'
    }

    attribute_map = {
        'sse': 'sse',
        'mse': 'mse',
        'rmse': 'rmse',
        'rsquared': 'rsquared',
        'aic': 'aic',
        'bic': 'bic',
        'sensitivity_analysis': 'sensitivityAnalysis'
    }

    def __init__(self, sse=None, mse=None, rmse=None, rsquared=None, aic=None, bic=None, sensitivity_analysis=None):  # noqa: E501
        """QualityMeasures - a model defined in Swagger"""  # noqa: E501
        self._sse = None
        self._mse = None
        self._rmse = None
        self._rsquared = None
        self._aic = None
        self._bic = None
        self._sensitivity_analysis = None
        self.discriminator = None
        if sse is not None:
            self.sse = sse
        if mse is not None:
            self.mse = mse
        if rmse is not None:
            self.rmse = rmse
        if rsquared is not None:
            self.rsquared = rsquared
        if aic is not None:
            self.aic = aic
        if bic is not None:
            self.bic = bic
        if sensitivity_analysis is not None:
            self.sensitivity_analysis = sensitivity_analysis

    @property
    def sse(self):
        """Gets the sse of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The sse of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._sse

    @sse.setter
    def sse(self, sse):
        """Sets the sse of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param sse: The sse of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._sse = sse

    @property
    def mse(self):
        """Gets the mse of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The mse of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._mse

    @mse.setter
    def mse(self, mse):
        """Sets the mse of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param mse: The mse of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._mse = mse

    @property
    def rmse(self):
        """Gets the rmse of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The rmse of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._rmse

    @rmse.setter
    def rmse(self, rmse):
        """Sets the rmse of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param rmse: The rmse of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._rmse = rmse

    @property
    def rsquared(self):
        """Gets the rsquared of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The rsquared of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._rsquared

    @rsquared.setter
    def rsquared(self, rsquared):
        """Sets the rsquared of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param rsquared: The rsquared of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._rsquared = rsquared

    @property
    def aic(self):
        """Gets the aic of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The aic of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._aic

    @aic.setter
    def aic(self, aic):
        """Sets the aic of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param aic: The aic of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._aic = aic

    @property
    def bic(self):
        """Gets the bic of this QualityMeasures.  # noqa: E501

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :return: The bic of this QualityMeasures.  # noqa: E501
        :rtype: float
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this QualityMeasures.

        Statistical values calculated to describe the performance of the model fitting procedure  # noqa: E501

        :param bic: The bic of this QualityMeasures.  # noqa: E501
        :type: float
        """

        self._bic = bic

    @property
    def sensitivity_analysis(self):
        """Gets the sensitivity_analysis of this QualityMeasures.  # noqa: E501

        Description of the results of an sensitivity analysis, i.e. how independence assumptions are met or how variables will affect the output of model  # noqa: E501

        :return: The sensitivity_analysis of this QualityMeasures.  # noqa: E501
        :rtype: str
        """
        return self._sensitivity_analysis

    @sensitivity_analysis.setter
    def sensitivity_analysis(self, sensitivity_analysis):
        """Sets the sensitivity_analysis of this QualityMeasures.

        Description of the results of an sensitivity analysis, i.e. how independence assumptions are met or how variables will affect the output of model  # noqa: E501

        :param sensitivity_analysis: The sensitivity_analysis of this QualityMeasures.  # noqa: E501
        :type: str
        """

        self._sensitivity_analysis = sensitivity_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualityMeasures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityMeasures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
